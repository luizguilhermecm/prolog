:- initialization(hanoi(5)).
hanoi(N) :- move(N,left,center,right).
move(0,_,_,_) :- !.
move(N,A,B,C) :- M is N -1,
        move(M,A,C,B),
        inform(A,B),
        move(M,C,B,A).
inform(X,Y) :- write([move,disco,de,X,para,Y]),
        nl.



:- initialization(shall_pass(souza, go)).

esq(go, sp, 0).
esq(go, rj, 1).
esq(go, souza, 2).
esq(go, mt, 3).
esq(go, duque, 4).

esq(pa, sp, 4).
esq(pa, rj, 3).
esq(pa, souza, 2).
esq(pa, mt, 1).
esq(pa, duque, 0).

esq(al, sp, 0).
esq(al, rj, 1).
esq(al, souza, 2).
esq(al, mt, 3).
esq(al, duque, 4).

esq(es, sp, 4).
esq(es, rj, 3).
esq(es, souza, 2).
esq(es, mt, 1).
esq(es, duque, 0).

esq(sp, al, 3).
esq(sp, es, 2).
esq(sp, go, 1).
esq(sp, pa, 0).

esq(rj, al, 0).
esq(rj, es, 1).
esq(rj, go, 2).
esq(rj, pa, 3).

esq(souza, al, 3).
esq(souza, es, 2).
esq(souza, go, 1).
esq(souza, pa, 0).

esq(mt, al, 0).
esq(mt, es, 1).
esq(mt, go, 2).
esq(mt, pa, 3).

esq(duque, al, 3).
esq(duque, es, 2).
esq(duque, go, 1).
esq(duque, pa, 0).

equal(A,B) :- A = B.

shall_pass(INI_X, INI_Y, FIM_X, FIM_Y) :- INI_X = FIM_X, INI_Y = FIM_Y, write('ahaaa').
shall_pass(INI_X, INI_Y, FIM_X, FIM_Y) :- 
        esq(INI_X, INI_Y, DIST_X), NEXT_DIST_X is DIST_X + 1,
        esq(INI_X, NEXT_X, NEXT_DIST_X), 
        write(NEXT_X), nl,
        esq(INI_Y, INI_X, DIST_Y), NEXT_DIST_Y is DIST_Y + 1,
        esq(INI_Y, NEXT_Y, NEXT_DIST_Y), 
        write(NEXT_Y).



